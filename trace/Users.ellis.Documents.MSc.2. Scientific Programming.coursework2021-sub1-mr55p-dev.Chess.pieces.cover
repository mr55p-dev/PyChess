    1: from typing import List
    1: from Chess.constants import PIECE_TYPES, WHITE, BLACK
    1: from Chess.coordinate import Position, Vec
    1: from Chess.exceptions import InvalidPiece
       
    2: class Piece:
    1:     """
               :param colour:                  White|Black
               :param type:                    King|Queen|Rook|Bishop|Knight|Pawn
               :param position:                ChessVec
                                                               A vector containing piece position
           :param kind:            String containing the letter of the piece.
               :method move:                   updates position
               :attr value:                    int
                                                               The value of the piece (based on kind)
           """
    1:     KING = "K"
    1:     QUEEN = "Q"
    1:     ROOK = "R"
    1:     BISHOP = "B"
    1:     KNIGHT = "N"
    1:     PAWN = "P"
           
    2:     def __init__(
                   self,
    1:             colour: int,
    1:             position: Position,
    1:             kind: str,
    1:             max_distance: int = 7,
    1:             is_active: bool = True
    1:         ) -> None:
   32:         if colour not in [WHITE, BLACK]: raise InvalidPiece("Not a valid colour")
   32:         if kind not in PIECE_TYPES: raise InvalidPiece("Not a valid type")
   32:         if max_distance not in range(1, 8): raise InvalidPiece("max_distance must be between 0, 8")
   32:         if not isinstance(is_active, bool): raise InvalidPiece("is_active must be bool")
       
   32:         self._colour = colour
   32:         self._position = position
   32:         self._kind = kind
   32:         self._is_active = is_active
   32:         self._max_distance = max_distance
       
    1:     def __repr__(self) -> str:
               return f"<{self._kind} colour {self._colour} at {self._position}>"
       
    1:     def __str__(self) -> str:
               return f"<{self._kind} colour {self._colour} at {self._position}>"
       
    1:     @property
    1:     def colour(self) -> int:
 1476:         return self._colour
       
    1:     @property
    1:     def position(self) -> Position:
   64:         return self._position
       
    1:     @property
    1:     def kind(self) -> str:
 1188:         return self._kind
       
    1:     @property
    1:     def active(self) -> bool:
               return self._is_active
       
    1:     @active.setter
    1:     def active(self, state: bool) -> None:
    2:         assert isinstance(state, bool)
    2:         self._is_active = state
       
    1:     @property
    1:     def distance(self) -> int:
               """The maximum distance a piece can move"""
 1296:         return self._max_distance
       
    1:     @property
    1:     def is_active(self) ->  bool:
  656:         return self._is_active
       
    1:     @is_active.setter
    1:     def is_active(self, state) -> None:
               self._is_active = state
       
    1:     def capture(self) -> None:
               """Mark the piece as captured"""
               self._is_active = False
       
    1:     @property
    1:     def projections(self) -> List[Vec]:
               """A list of the directions that the piece can move in."""
               return [Vec(1,1)]
       
       
    1:     @staticmethod
    1:     def special_moves():
               """The special moves a piece can participate in, if they are still valid
               i.e castling for a king, en-passant,..."""
       
       
    2: class King(Piece):
    1:     def __init__(self, colour: int, position: Position) -> None:
    2:         super().__init__(colour, position, kind="K", max_distance=1)
       
    1:     @property
    1:     def projections(self):
               """The directions this piece can move in"""
   18:         return [
   18:             Vec(1, 1),
   18:             Vec(1, 0), 
   18:             Vec(1, -1),
   18:             Vec(0, 1),
   18:             Vec(0, -1),
   18:             Vec(-1, 1),
   18:             Vec(-1, 0),
   18:             Vec(-1, -1)
               ]
       
       
    2: class Queen(Piece):
    1:     def __init__(self, colour: int, position: Position) -> None:
    2:         super().__init__(colour, position, kind="Q")
       
    1:     @property
    1:     def projections(self):
               """The directions this piece can move in"""
   18:         return [
   18:             Vec(1, 1),
   18:             Vec(1, 0),
   18:             Vec(1, -1),
   18:             Vec(0, 1),
   18:             Vec(0, -1),
   18:             Vec(-1, 1),
   18:             Vec(-1, 0),
   18:             Vec(-1, -1)
               ]
       
    2: class Rook(Piece):
    1:     def __init__(self, colour: int, position: Position) -> None:
    4:         super().__init__(colour, position, kind="R")
       
    1:     @property
    1:     def projections(self):
               """The directions this piece can move in"""
   36:         return [
   36:             Vec(1, 0),
   36:             Vec(0, 1),
   36:             Vec(0, -1),
   36:             Vec(-1, 0),
               ]
       
    2: class Bishop(Piece):
    1:     def __init__(self, colour: int, position: Position) -> None:
    4:         super().__init__(colour, position, kind="B")
       
    1:     @property
    1:     def projections(self):
               """The directions this piece can move in"""
   36:         return [
   36:             Vec(1, 1),
   36:             Vec(1, -1),
   36:             Vec(-1, 1),
   36:             Vec(-1, -1)
               ]
       
    2: class Knight(Piece):
    1:     def __init__(self, colour: int, position: Position) -> None:
    4:         super().__init__(colour, position, kind="N", max_distance=1)
       
    1:     @property
    1:     def projections(self):
               """The directions this piece can move in"""
   36:         return [
   36:             Vec(1, 2),
   36:             Vec(1, -2),
   36:             Vec(2, 1),
   36:             Vec(2, -1),
   36:             Vec(-1, 2),
   36:             Vec(-1, -2),
   36:             Vec(-2, 1),
   36:             Vec(-2, -1),
               ]
       
    2: class Pawn(Piece):
    1:     def __init__(self, colour: int, position: Position) -> None:
   16:         super().__init__(colour, position, kind="P", max_distance=2)
       
    1:     @property
    1:     def projections(self):
               """The directions this piece can move in"""
  144:         if self._colour == WHITE:
    8:             return [
    8:                 Vec(1, 0),
    8:                 Vec(1, -1),
    8:                 Vec(1, 1),
                   ]
               else:
  136:             return [
  136:                 Vec(-1, 0),
  136:                 Vec(-1, -1),
  136:                 Vec(-1, 1),
                   ]
       # class Pawn(Piece):
       #     def __init__(self, colour: int, position: Position) -> None:
       #         super().__init__(colour, position, kind="P", max_distance=1)
       # 
       #     @property
       #     def projections(self):
       #         """The directions this piece can move in"""
       #         if self._colour == WHITE:
       #             return [
       #                 Vec(1, 0),
       #                 Vec(2, 0),
       #                 Vec(1, -1),
       #                 Vec(1, 1),
       #             ]
       #         else:
       #             return [
       #                 Vec(-1, 0),
       #                 Vec(-2, 0),
       #                 Vec(-1, -1),
       #                 Vec(-1, 1),
       #             ]
